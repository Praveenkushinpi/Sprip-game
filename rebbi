const rabbit = "r";
const carrot = "c";
const rock = "o";
const trap = "t";
const powerUp = "p";

setLegend
  [rabbit, bitmap`
  ..33..........
  ..3333333333..
  .333333333333.
  .333333333333.
  ..3333333333..
  ....33333333..
  ......333333..
  .....3333333..
  .....3333333..
  .....3333333..
  .......33.....
  .......33.....
  ..............
  ..............
  ..............
  ..............`],
  
  [carrot, bitmap`
  ..............
  .......11.....
  ......111.....
  .....1111.....
  ......11......
  ....111111....
  ....122211....
  ....122211....
  ....122211....
  ....122211....
  ....122211....
  .....1111.....
  ..............
  ..............
  ..............
  ..............`],

  [rock, bitmap`
  .......DDDD....
  .....DDDDDD....
  ....DDDDDDD....
  ...DDDDDDDD....
  ...DDDDDDDDD...
  ...DDDDDDDDD...
  ..DDDDDDDDDD...
  ..DDDDDDDDDD...
  ..DDDDDDDDDD...
  ..DDDDDDDDD....
  ..DDDDDDDD.....
  ....DDDD.......
  ................
  ................
  ................
  ................`],

  [trap, bitmap`
  .......222......
  ......2222......
  ......2222......
  ......2222......
  ......2222......
  ......2222......
  .....22222......
  .....22222......
  .....22222......
  .....22222......
  ......2222......
  ......2222......
  ......2222......
  ......2222......
  ......2222......
  ......2222......`],

  [powerUp, bitmap`
  ................
  .......99.......
  .....999999.....
  ....99999999....
  ....99999999....
  ....99999999....
  .....999999.....
  ......9999......
  ................
  ................
  ................
  ................
  ................
  ................
  ................
  ................`]
);

// Define the initial game map layout
setMap(map`
..................
..................
..o....p.......o..
..r............c..
..................
..c............c..
..................
..t............t..
..................
..................
..o............t..
..................
..................
..................
..................
..................
..................`);

// Rabbit's starting health
let health = 3;

// Rabbit's starting score
let score = 0;

// Timer for the game (optional)
let timeLeft = 60;

// Moving trap direction (1 for down, -1 for up)
let trapDirection = 1;

// Function to update health
function updateHealth() {
  clearText();
  addText("Health: " + health, { x: 1, y: 0 });
}

// Function to update score
function updateScore() {
  clearText();
  addText("Score: " + score, { x: 1, y: 1 });
}

// Function to update timer
function updateTimer() {
  clearText();
  addText("Time: " + timeLeft, { x: 1, y: 2 });
}

// Function to handle game over
function gameOver() {
  addText("Game Over!", { x: 3, y: 2 });
  // Logic to reset or end the game
}

// Initial UI updates
updateHealth();
updateScore();
updateTimer();

// Movement controls for the rabbit
onInput("w", () => {
  getFirst(rabbit).y -= 1;
});

onInput("s", () => {
  getFirst(rabbit).y += 1;
});

onInput("a", () => {
  getFirst(rabbit).x -= 1;
});

onInput("d", () => {
  getFirst(rabbit).x += 1;
});
// Function to handle random carrot respawn
function respawnCarrot() {
  const emptyTiles = getAllTiles().filter(tile => tile.every(obj => obj.type !== rabbit && obj.type !== rock && obj.type !== trap && obj.type !== powerUp));
  if (emptyTiles.length > 0) {
    const newCarrotTile = emptyTiles[Math.floor(Math.random() * emptyTiles.length)];
    addSprite(newCarrotTile.x, newCarrotTile.y, carrot);
  }
}

// Timer interval
setInterval(() => {
  timeLeft -= 1;
  updateTimer();
  if (timeLeft <= 0) {
    gameOver();
  }
}, 1000);

// Movement logic for traps
setInterval(() => {
  const traps = getAll(trap);
  traps.forEach(trapObj => {
    const nextY = trapObj.y + trapDirection;
    // Check if the trap is within bounds and change direction if needed
    if (nextY < 0 || nextY >= height()) {
      trapDirection *= -1;
    } else {
      trapObj.y += trapDirection;
    }