const donic = "s";
const star = "a";
const spike = "w";

//let repeat = null;

setLegend(
  [ donic, bitmap`
.66666..........
66FF66666.......
..F6C6666.......
.66F66666.......
666662060.......
..FF62020.......
666699909.......
....CC99........
...CFC99........
......99........
......66........
.....6.F........
.....6.F........
.....2.L........
....33.3..3.....
....33.33L33....`],
  [ star, bitmap`
.........4C.....
........4C4.....
........C44.....
...0000C00000...
...0330003330...
..003333333300..
..033333333330..
..033333333330..
..033333333330..
..033333333330..
..033333333300..
..00033333330...
....000333000...
......00000.....
................
................`],
[spike ,bitmap`
0............0..
06..........30..
606........303..
.606......303...
..606....303....
...606..303.....
....606303......
.....6003.......
.....3006.......
....303606......
...303..606.....
..303....606....
.303......606...
.03........60...
.0..........0...
.0..........0...`]
);
let level = 0; 
const levels = [
  map`
wwwwwwwwwwwwwwww
w..............w
w..............w
w..............w
w...wwwwwwww...w
w..............w
w..............w
w..............w
w..............w
w..............w
w.....s....www.w
w..............w
w..............w
w..............w
w..............w
w.www.....www..w
w..............w
w..............w
w..............w
wwwwwwwwwwwwwwww`,
];

let currentLevel = levels[level];
setMap(currentLevel);

setSolids([donic, spike]); 
let donic = [getFirst(donic)];
let donicDirection = "right";
let growing = false;
let gameOver = false;
function placestar() {
  let emptyTiles = [];
  for (let x = 0; x < width(); x++) {
    for (let y = 0; y < height(); y++) {
      let tile = getTile(x, y);
      if (tile.length === 0 || tile.every(sprite => ![donic, spike].includes(sprite.type))) {
        emptyTiles.push({ x, y });
      }
    }
  }
if (emptyTiles.length > 0) {
    let randomIndex = Math.floor(Math.random() * emptyTiles.length);
    let { x, y } = emptyTiles[randomIndex];
    addSprite(x, y, star);
  }
}

placespike();

function movedonic() {
  if (gameOver) return;

  let head = donic[0];
  let newHead;
if (donicDirection === "up") {
    newHead = { x: head.x, y: head.y - 1 };
  } else if (donicDirection === "down") {
    newHead = { x: head.x, y: head.y + 1 };
  } elsehead.(donicDirection === "left") {
    newHead = { x: head.x - 1, y: head.y };
  } else if (donicDirection === "right") {
    newHead = { x: head.x + 1, y: head.y };
  }

  if (newHead) {
    let newHeadTile = getTile(newHead.x, newHead.y);
if (newHeadTile.find(t => t.type === wall) || newHeadTile.find(t => t.type === donic)) {
      playTune(gameOverSound);
      addText("Game Over!", { y: 4, color: color`3` });
      gameOver = true;
      return;
    }

    if (newHeadTile.find(t => t.type === star)) {
      playTune(chopSound);
      growing = true;
      clearTile(newHead.x, newHead.y);
      placespike();
    }
    addSprite(newHead.x, newHead.y, donic);
    if (donic.length > 0) {
      addSprite(head.x, head.y, donic);
    }
    
    donic.unshift(newHead);
    
    if (!growing) {
      let tail = donic.pop();
      clearTile(tail.x, tail.y);
    } else {
      growing = false;
    }
  }
}
onInput("w", () => {
    donicDirection = "up";
});

onInput("a", () => {
    donicDirection = "left";
});

onInput("s", () => {
    snakeDirection = "down";
});

onInput("d", () => {
    donicDirection = "right";
});

setInterval(movedonic, 120);
